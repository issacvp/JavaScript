Dynamic programming notes 
--------------------------
. Notice any overlapping subproblems 
. Decide what is the trivially smallest input 
. Think recursively to use memoization
. Think iteratively to use tabulation 
. Draw a Strategy first 

==================================================
           Memoization Recipe
===================================================
1.  Make it work   , recursive 
	1.1 Visualize it as a tree like structure 
	1.2 Implement the tree using recursion 
	1.3 test it 
	
2.  Make it efficient 
	2.1 Add a memo object 
	2.2 Add a base case to return memo values
	2.3 Store return values into the memo 
	

=======================================================
             Tabulation  Recipe
=======================================================
Instead of storing intermediate values in a map,  Tabulation stores the values in an array.

.Visualize the problem as a table 
.Size the table based on the inputs 
.Initialize the table with default values 
.Seed the trivial answer into the table 
.Iterate through the table 
.fill further positions based on the current position 
(Focus on the options what we have in the problem)


1) 
const foo = (n) => {
	if(n <=1) return;
	foo(n-1);
}

The results are foo(5) --> 5,4,3,2,1 exit

The time complexity is O(n), space complexity is O(n) as well 

2) 
const bar = (n) => {
	if(n <=1) return;
	bar(n-2);
}

6, 4, 2 , 0
The time complexity and space are O(n/2) ==> O(n)

3) 
const dib = (n) => {
	if (n<=1) return;
	dib(n-1);
	dib(n-1);
}

                              
							  5                                           1
				4						  4                               2
		3				3		3					3                     4
	2		2		2		2 2		2		2				2             8
1	  1  1    1    1  1   1 1 1 1  1  1    1  1         1       1         16

o(2^n) time complexity,   but the space complexity is just O(n),  because at a moment in time, the max stacks are just the height of the tree.


4) 

const dib = (n) => {
	if (n<=1) return;
	dib(n-2);
	dib(n-2);
}

time complexity is  O(2^n),   space complexity is remain o(n) 

==============================================================
           Fibonacci  
============================================================

5)   fibonacci calls 

const fib = (n) => {
	if(n <=1 ) return 1;
	return fib(n-1) +fib(n-2)
}

time complexity O(2^n)  ,space complexity O(n) 

Dynamic programming is something we have a larger problem, but we can decompose it to smaller problems and solve it.


Memoized: 

Memoization is 	store the results of sub problem and when later , the results needed, fetch it from the memo than running sub problem again. 

//memoization
// js object, keys will be the argument to function m value will be the return value
const fib = (n, memo = {}) => {
    if(n in memo) 
        return memo[n];
    if( n<=2 ) 
        return 1;
    memo[n] = fib(n-1, memo) + fib(n-2, memo);
    return memo[n];
}
	
						6 
					5		4
				4		3
			3		2
		2		1


memo {
	3: 2,
	4: 3,
	5: 5
}

Time complexity :-  O(n) time and O(n) space 

Tabulation : 
The 0th number of the sequence is 0;
The 1st number of the sequence is 1; 
To generate the next number of the sequence , we sum the previous two 

Complexity : 
    time : O(n) 
    space : O(n)

 
const fib = (n) => {
    const table = Array(n+1).fill(0);
    table[1] = 1;
    for(let i=0;i<=n;i++){
        table[i+1] += table[i];
        table[i+2] += table[i];
    }
    return table[n];
}


====================================================================
                      gridTraveler Memoization
====================================================================

SAy that you are a traveler on a 2D grid, You begin in the top-left corner and your goal is to travel to the bootm -right corner
You may only move down or right.

In how many ways can you travel to the goal on a grid with dimentions m*n?

write a function 'gridTraveler(m,n)' 

gridtraveler(2*3) --> 3
gridTraveler(1,1) --> 1  "do nothing"
gridTraveler(0,1) --> 0  "Grid invalid" 
gridTraveler(1,0) --> 0 
gridTraveler(0,0) --> 0 
 
                   (2,3)
		    (1,3) 			(2,2)
	(0,3)			(1,2)  (1,2)    (2,1)
						(1,1)    (1,1)     (1,1)

The nodes with 0 are invalid,  so just base case return 0 ,   anything (1,1) ==> 1
 

const gridTraveler = (m, n) => {
    if(m == 1 && n == 1) 
        return 1;
    if(m == 0 || n == 0) 
        return 0;
    return gridTraveler(m-1,n)+gridTraveler(m,n-1);
}

O(2^(m+n))  time ,  O(m+n) space  


with memoization :

const gridTraveler = (m, n, memo = {}) => {
    const key = m +','+ n; 
    const rev_key = n+ ','+m;
    
	if(key in memo) return memo[key];
    if(rev_key in memo) return memo[rev_key];
    
	if(m == 1 && n == 1) return 1;
    if(m == 0 || n == 0) return 0;

    memo[key] =  gridTraveler(m-1,n, memo)+gridTraveler(m,n-1, memo);
	memo[rev_key] = memo[key];
    
	return memo[key];
}

Tabulation : 
const gridTraveler = (m, n) => {
    const table = Array(m + 1)
        .fill()
        .map(() => Array(n + 1).fill(0));
    table[1][1] = 1;
    for (let i = 0; i <= m; i++) {
        for (let j = 0; j <= n; j++) {
            const current = table[i][j];
            if (j + 1 <= n)
                table[i][j + 1] += current;
            if (i + 1 <= m)
                table[i + 1][j] += current;
        }
    }
    return table[m][n];
}


Complexity : 
    time : O(mn)
    space : O(mn)







=======================================================
                canSum function 
=======================================================
Write a fun 'canSum(targetSum, numbers)' that takes in a targetSum and an array of numbers as arguments.

The fun should return a boolean indicating whether or not it is possible to generate the targetSum using numbers from the array. 

Brute force solution :

const canSum = (targetSum, values) => {
    if(targetSum == 0) return true;
    if(targetSum < 0) return false;

    for(let num of values) {
        const remainder = targetSum - num;
        if(canSum(remainder, values)===true){
            return true;
        }
    }
    return false;
}

console.log(canSum(100, [30,20,80,90,110]));


m =  targetSum 
n = length of the array

The height of the tree is m ,     O(n^m) time  (TOOOO BIG!!!!)    O(m) space 


Memoized : 

const canSum = (targetSum, values, memo={}) => {
    if(targetSum in memo) return memo[targetSum];

    if(targetSum == 0) return true;
    if(targetSum < 0) return false;


    for(let num of values) {
        const remainder = targetSum - num;
        if(canSum(remainder, values, memo)===true){
            memo[targetSum] = true;
            return true;
        }
    }
    memo[targetSum] = false;
    return false;
}


O(m*n) time and O(m) space 


Tabulation : 

Create a table as targetSum+1.
Initialize the array with False 
Seed values 
    table[0] = true
    Iterate through the numbers and modify as True as well 

const canSum = (targetSum, numbers) => {
    const table = Array(targetSum + 1).fill(false);
    table[0] = true;
    for (let i = 0; i <= targetSum; i++) {
        if (table[i] === true) {
            for (let num of numbers) {
                if (i + num <= targetSum)
                    table[i + num] = true;
            }
        }
    }
    return table[targetSum];
}

Complexity : 
    m = targetSum 
    n = numbers.length 
    time : O(mn)
    space : O(m)


	
=======================================================
                howSum function 
=======================================================
Write a function howSum(targetSum, numbers) that takes in a targetSum and an array of aruments.
The function should return an array containing any combination of elements that add up to exactly the targetSum. if there is no cmbination that add up to the targetSum , then return null.

If there are multiple combinations possible,you may return any signle one.

howSum(8, [2,3,5]) --> 
{
	[2,2,2,2],
	[3,5]
}

howSum(7, [2,4]) --> null
howSum(0, [1,2,3]) --> 


Brute Force method : 
const howSum = (targetSum, numbers) => {
    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        const remainder = targetSum - num;
        const remainderResult = howSum(remainder, numbers);
        if(remainderResult !== null) {
            return [...remainderResult, num];     //<---- Maximum length is m,  to copy over it may take m length each time 
        }
    }
    return null;
};

time : O(n^m*m),  
space :

stack space  ->  O(m)   m recursive calls at a time in operation 


Memoized: 
We know that in terms of number of calls , its same ,   but the memo helps a lot to skip some calls . 
Time : O(n*m*m) --> O(n*m^2)

Space : O(m) + space used by memo 

{
300 : [7,7,7,7,7,7],
34 : [3,4,5,6,6]
etc
}

O(m^2)


Tabulation : 
const howSum = (targetSum, numbers) => {
    const table = Array(targetSum + 1).fill(null);
    table[0] = [];
    let count = 0;
    for (let i = 0; i <= targetSum; i++) {
        if (table[i] !== null) {
            for (let num of numbers) {
                if(i+num <=targetSum){
                    table[i + num] = [num, ...table[i]];
                }
            }
        }
    }
    return table[targetSum];
}
 

=======================================================
                bestSum function 
=======================================================
Write a function  bestSum(targetSum, numbers) that takes in a targetSum and an array of numbers as arguments.

The function should return an array containing the shortest combination that add up to exactly the targetSum.

If there s a tie for the shortest combination, you may retur any one of the shortest.

Brute force : 
const bestSum = (targetSum, numbers) => {
    if (targetSum ===0) return [];
    if (targetSum <0) return null;

    let shortestCombination = null;
    for(let num of numbers) {
        const remainder = targetSum-num;
        const remainderCombination = bestSum(remainder, numbers);
        if(remainderCombination !==null) {
            const combination = [...remainderCombination, num];
            if(shortestCombination ===null || combination.length < shortestCombination.length) {
                shortestCombination = combination
            }
        }
    }
    return shortestCombination;
}


Complexity :                     
m  = targetSum ,   n = numbers.length 
time : O(branching factor ^ height of the tree * array iteration) => O(n^m*m)
space : O(stack space for a moment * intermediate array (shortestCombination)  ) => O(m*m) => O(m^2)

Memoized : 

const bestSum = (targetSum, numbers, memo={}) => {
    if(targetSum in memo) return memo[targetSum];
    if (targetSum ===0) return [];
    if (targetSum <0) return null;

    let shortestCombination = null;
    for(let num of numbers) {
        const remainder = targetSum-num;
        const remainderCombination = bestSum(remainder, numbers, memo);
        if(remainderCombination !==null) {
            const combination = [...remainderCombination, num];
            if(shortestCombination ===null || combination.length < shortestCombination.length) {
                shortestCombination = combination;
            }
        }
    }
    memo[targetSum] = shortestCombination;
    return shortestCombination;
};


Complexity : 
time  O(n*m^2)
space  O(m^2)

Tabulation : 

=======================================================
                canConstruct function 
=======================================================
Write a function canConstruct(target, wordBank) that accepts a target string and an array of string
The function should return a booean indicating whether or not the target can be constructed by concatenating emelnets if of the wordBank array.

You may reuse elements of wordBank as many times as needed.

Brute Force : 
            canConstruct(abcdef,[[ab,abc,cd,def,abcd]]) 

                 abcdef
         (ab)     (abc)   (abcd)
        cdef      def      ef
     (cd)         (def)     
    ef             ''        <-- 

const canConstruct = (target, wordBank) => {
    if (target === '') return true;
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            if(canConstruct(suffix, wordBank) === true){
                return true;
            }
        }
    }
    return false;
};

 Complexity : 
 time : 
        enterapotentpot  [a, p , ent, enter, ot, o, t ]
    (ent)             (enter) 

     m = target.length 
     n = wordBank.length

     in worst case : height of the tree is m (target length) 
     branching factor : count of words in word Bank 
     slicing the string : m  at every step 
     O(n^m * m)  
space : 
     in worst case : height of the tree is m (target length) 
            const suffix = target.slice(word.length);
            if(canConstruct(suffix, wordBank) === true)
    There is a new string after the slice   cause another m size 
    O(m^2)

Memoize : 
const canConstruct = (target, wordBank, memo = {}) => {
    if(target in memo) return memo[target];
    if (target === '') return true;
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            if(canConstruct(suffix, wordBank, memo) === true){
                memo[target] = true;
                return true;
            }
        }
    }
    memo[target] = false;
    return false;
};

Complexity :
    m = target.length
    n = wordBank.length
    time : O(n*m^2)
    space : O(m^2)


Tabulation : 

('abcdef', ['ab', 'abc', 'cd', 'def', 'abcd']))
Step 1: 
0   1   2   3   4   5   6   <-- Word length +1
T   F   F   F   F   F   F   <-- Initialize this way , because canConstruct('',[....]) is always true;
a   b   c   d   e   f   

Step 2 
0   1   2   3   4   5   6   
T   F   T   T   T   F   F  <-- Skip because position 1 is F  
a   b   c   d   e   f   


Step 3 
0   1   2   3   4   5   6   
T   F   T   T   T   F   F  <-- cd, already there   
a   b   c   d   e   f  


Step 4 
0   1   2   3   4   5   6   
T   F   T   T   T   F   F  <-- def   
a   b   c   d   e   f


Step 2 
0   1   2   3   4   5   6   
T   F   T   T   T   F   T  <--
a   b   c   d   e   f

Complexity :
    m = target 
    n= wordBank.length
    time : O(m^2*n)
    space : O(m)

('skateboard', ['bo', 'rd', 'ate', 't', 'ska', 'sk', 'board']))
0   1   2   3   4   5   6   7   8   9
T   T   T   T   T   T   T   T   T   T
s   k   a   t   e   b   o   a   r   d


function canConstruct(target, wordBank) {
    const table = Array(target.length + 1).fill(false);
    table[0] = true;
    for (let i = 0; i <= target.length; i++) {
        if (table[i] === true) {
            for (let word of wordBank) {
                //if the word matches the characters starting at position i
                if (target.slice(i, i + word.length) === word) {
                    table[i + word.length] = true;
                }
            }
        }
    }
    return table[target.length];
};


=======================================================
                countConstruct function 
=======================================================
Write a function countConstruct(target, workBank) that accepts a target string and an array of Strings 

The function should return the number of ways that the target can be constructed by concatenating elements of the 
wordBank array 

You may reuse elements of wordBank as many times as needed 

BruteForce : 
const countConstruct = (target, wordBank) => {
    if (target === '') return 1;
    var count = 0;
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            count = count + countConstruct(suffix, wordBank);
        }
    }
    return count;
}

Complexity : 
m = target.length;
n = wordBank.length;

time : O(n^m*m) 
space : O(m^2) 

Memoized:

const countConstruct = (target, wordBank, memo={}) => {
    if (target in memo) return memo[target];
    if (target === '') return 1;
    var count = 0;
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            count = count + countConstruct(suffix, wordBank, memo);
        }
    }
    memo[target] = count;
    return count;
}

time : O(n*m^2)
space : O(m^2) 

Tabulation : 


Complexity : 
    m = target.length
    n = wordBank.length
    time : O(m^2*n) 
    space : O(m) 

function countConstruct(target, wordBank) {
    const table = Array(target.length + 1).fill(0);
    table[0] = 1;
    for (let i = 0; i <= target.length; i++) {
        if (table[i] > 0) {
            for (let word of wordBank) {
                //if the word matches the characters starting at position i
                if (target.slice(i, i + word.length) === word) {
                    table[i + word.length] += table[i];
                }
            }
        }
    }
    return table[target.length];
};

=======================================================
                allConstruct function 
=======================================================
Write a function allConstruct(target, wordBank) that accepts a target string and an array of strings.

The function should return a 2D array containing all of the ways that the target can be constructed by 
concatenating elements of the wordBank array.

Each element of the 2D array should represent one combination that constructs the target.


Brute Force : 
/*const allConstruct = (target, wordBank) => {
    if (target === '') return [[]];
    var result = [];
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            const suffixWays = allConstruct(suffix, wordBank);
            const targetWays = suffixWays.map(way => [word, ...way]);
            result.push(...targetWays);
        }
    }
    return result;
} */

Complexity : 
   m = target.length
   n = wordBank.length

   time : O(n^m) 
   space : O(m)

Memoized: 

const allConstruct = (target, wordBank, memo={}) => {
    if (target in memo) return memo[target];
    if (target === '') return [[]];
    var result = [];
    for(let word of wordBank) {
        if(target.indexOf(word) === 0) {
            const suffix = target.slice(word.length);
            const suffixWays = allConstruct(suffix, wordBank, memo);
            const targetWays = suffixWays.map(way => [word, ...way]);
            result.push(...targetWays);
        }
    }
    memo[target] = result;
    return result;
}


Tabulation : 
    O(n^m) time 
    O(n^m) space 





===============================================================
                       DP Patterns 
===============================================================

==============================================
1. Minimum (Maximum) Path to Reach a Target
=============================================
Generate problem statement for this pattern

Statement:
Given a target find minimum (maximum) cost / path / sum to reach the target.

Approach:
Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.

routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]

Generate optimal solutions for all values in the target and return the value for the target.

for (int i = 1; i <= target; ++i) {
   for (int j = 0; j < ways.size(); ++j) {
       if (ways[j] <= i) {
           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;
       }
   }
}
 
return dp[target]


Similar Problems

746. Min Cost Climbing Stairs Easy

for (int i = 2; i <= n; ++i) {
   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);
}
 
return dp[n]

64. Minimum Path Sum Medium

for (int i = 1; i < n; ++i) {
   for (int j = 1; j < m; ++j) {
       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
   }
}
 
return grid[n-1][m-1]



322. Coin Change Medium

for (int j = 1; j <= amount; ++j) {
   for (int i = 0; i < coins.size(); ++i) {
       if (coins[i] <= j) {
           dp[j] = min(dp[j], dp[j - coins[i]] + 1);
       }
   }
}



931. Minimum Falling Path Sum Medium

983. Minimum Cost For Tickets Medium

650. 2 Keys Keyboard Medium

279. Perfect Squares Medium

1049. Last Stone Weight II Medium

120. Triangle Medium

474. Ones and Zeroes Medium

221. Maximal Square Medium

322. Coin Change Medium

1240. Tiling a Rectangle with the Fewest Squares Hard

174. Dungeon Game Hard

871. Minimum Number of Refueling Stops Hard

==========================
2. Distinct Ways
==========================
Generate problem statement for this pattern

Statement:
Given a target find a number of distinct ways to reach the target.

Approach:
Sum all possible ways to reach the current state.

routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]

Generate sum for all values in the target and return the value for the target.

for (int i = 1; i <= target; ++i) {
   for (int j = 0; j < ways.size(); ++j) {
       if (ways[j] <= i) {
           dp[i] += dp[i - ways[j]];
       }
   }
}
 
return dp[target]

Similar Problems: 

70. Climbing Stairs easy

for (int stair = 2; stair <= n; ++stair) {
   for (int step = 1; step <= 2; ++step) {
       dp[stair] += dp[stair-step];   
   }
}

62. Unique Paths Medium

for (int i = 1; i < m; ++i) {
   for (int j = 1; j < n; ++j) {
       dp[i][j] = dp[i][j-1] + dp[i-1][j];
   }
}

1155. Number of Dice Rolls With Target Sum Medium

for (int rep = 1; rep <= d; ++rep) {
   vector<int> new_ways(target+1);
   for (int already = 0; already <= target; ++already) {
       for (int pipe = 1; pipe <= f; ++pipe) {
           if (already - pipe >= 0) {
               new_ways[already] += ways[already - pipe];
               new_ways[already] %= mod;
           }
       }
   }
   ways = new_ways;
}

Note

Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.

688. Knight Probability in Chessboard Medium

494. Target Sum Medium

377. Combination Sum IV Medium

935. Knight Dialer Medium

1223. Dice Roll Simulation Medium

416. Partition Equal Subset Sum Medium

808. Soup Servings Medium

790. Domino and Tromino Tiling Medium

801. Minimum Swaps To Make Sequences Increasing

673. Number of Longest Increasing Subsequence Medium

63. Unique Paths II Medium

576. Out of Boundary Paths Medium

1269. Number of Ways to Stay in the Same Place After Some Steps Hard

1220. Count Vowels Permutation Hard


=======================
Merging Intervals
=======================
Generate problem statement for this pattern

Statement:
Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.

Approach:
Find all optimal solutions for every interval and return the best possible answer.

// from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
Get the best from the left and right sides and add a solution for the current position.

for(int l = 1; l<n; l++) {
   for(int i = 0; i<n-l; i++) {
       int j = i+l;
       for(int k = i; k<j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1]

Similar Problems:
1130. Minimum Cost Tree From Leaf Values Medium

for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n - l; ++i) {
       int j = i + l;
       dp[i][j] = INT_MAX;
       for (int k = i; k < j; ++k) {
           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);
       }
   }
}

96. Unique Binary Search Trees Medium

1039. Minimum Score Triangulation of Polygon Medium

546. Remove Boxes Medium

1000. Minimum Cost to Merge Stones Medium

312. Burst Balloons Hard

375. Guess Number Higher or Lower II Medium


===============
DP on Strings
===============
General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big

Statement:
Given two strings s1 and s2, return some result.

Approach:
Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.

// i - indexing string s1
// j - indexing string s2
for (int i = 1; i <= n; ++i) {
   for (int j = 1; j <= m; ++j) {
       if (s1[i-1] == s2[j-1]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}

If you are given one string s the approach may little vary

for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}


1143. Longest Common Subsequence Medium

for (int i = 1; i <= n; ++i) {
   for (int j = 1; j <= m; ++j) {
       if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
       } else {
           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
       }
   }
}


647. Palindromic Substrings Medium

for (int l = 1; l < n; ++l) {
   for (int i = 0; i < n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j] && dp[i+1][j-1] == j-i-1) {
           dp[i][j] = dp[i+1][j-1] + 2;
       } else {
           dp[i][j] = 0;
       }
   }
}

516. Longest Palindromic Subsequence Medium

1092. Shortest Common Supersequence Medium

72. Edit Distance Hard

115. Distinct Subsequences Hard

712. Minimum ASCII Delete Sum for Two Strings Medium

5. Longest Palindromic Substring Medium

=================================
Decision Making
=================================
The general problem statement for this pattern is for given situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.

Statement
Given a set of values find an answer with an option to choose or ignore the current value.

Approach
If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.

// i - indexing a set of values
// j - options to ignore j values
for (int i = 1; i < n; ++i) {
   for (int j = 1; j <= k; ++j) {
       dp[i][j] = max({dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]});
       dp[i][j-1] = max({dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]});
   }
}

198. House Robber Easy

for (int i = 1; i < n; ++i) {
   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);
   dp[i][0] = dp[i-1][1];
}


121. Best Time to Buy and Sell Stock Easy

714. Best Time to Buy and Sell Stock with Transaction Fee Medium

309. Best Time to Buy and Sell Stock with Cooldown Medium

123. Best Time to Buy and Sell Stock III Hard

188. Best Time to Buy and Sell Stock IV Hard
